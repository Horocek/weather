{"version":3,"sources":["utils/Api.js","utils/Tools.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","city","a","fetch","response","json","parsToTemperature","data","list","map","item","name","dt_txt","temperature","min","main","temp_min","max","temp_max","Math","round","parsToWind","windSpeed","wind","speed","parsToWeather","weather","description","icon","getWeatherTemperature","getWeatherWind","getWeather","ListItem","props","style","color","value","WeatherTemperature","state","dataWeather","handleChange","bind","event","this","setState","target","width","height","margin","top","right","left","bottom","percent","dataKey","stroke","position","unit","type","activeDot","r","onChange","onClick","buttonGetWeather","graphDraw","Component","WeatherWind","Weather","array","src","weatherDraw","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAAMA,G,OAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACSC,MAAM,sDAAD,OAAuDF,EAAvD,qEADd,cACRG,EADQ,gBAEDA,EAASC,OAFR,mFAAH,uDCETC,EAAoB,SAACC,GAO3B,OANeA,EAAKC,KAAKC,KAAI,SAACC,GAC5B,MAAO,CACLC,KAAOD,EAAKE,OACZC,aANkBC,EAMSJ,EAAKK,KAAKC,SANdC,EAMwBP,EAAKK,KAAKG,SAN1BC,KAAKC,OAAON,EAAMG,GAAO,KAAvC,IAACH,EAAKG,MAarBI,EAAa,SAACd,GAOlB,OANeA,EAAKC,KAAKC,KAAI,SAACC,GAC5B,MAAO,CACLC,KAAOD,EAAKE,OACZU,UAAYZ,EAAKa,KAAKC,WAOtBC,EAAgB,SAAClB,GAQrB,OAPeA,EAAKC,KAAKC,KAAI,SAACC,GAC5B,MAAO,CACLC,KAAOD,EAAKE,OACZc,QAAUhB,EAAKgB,QAAQ,GAAGC,YAC1BC,KAAOlB,EAAKgB,QAAQ,GAAGE,U,OCdvBC,EAAqB,uCAAG,WAAO5B,GAAP,SAAAC,EAAA,kEAAuBI,EAAvB,SAA+CN,EAAUC,GAAzD,qIAAH,sDACrB6B,EAAc,uCAAG,WAAO7B,GAAP,SAAAC,EAAA,kEAAuBmB,EAAvB,SAAwCrB,EAAUC,GAAlD,qIAAH,sDACd8B,EAAU,uCAAG,WAAO9B,GAAP,SAAAC,EAAA,kEAAuBuB,EAAvB,SAA2CzB,EAAUC,GAArD,qIAAH,sDACT+B,EAAW,SAACC,GAEf,OAAO,uBAAGC,MAAO,CAAEC,MAAO,QAAUF,EAAMG,QAGxCC,E,kDAEF,aAAc,IAAD,8BACT,gBACKC,MAAQ,CAACrC,KAAM,YAChBsC,YAAa,CAAC,CAAC5B,KAAO,IAAKE,YAAc,IAAI,CAACF,KAAO,IAAKE,YAAc,MAE5E,EAAK2B,aAAe,EAAKA,aAAaC,KAAlB,gBALX,E,yDASAC,GACTC,KAAKC,SAAS,CAAC3C,KAAMyC,EAAMG,OAAOT,U,+JAKlCO,K,SAAmCd,EAAsBc,KAAKL,MAAMrC,M,yBAArDsC,Y,WAAVK,S,wJAGJ,OACG,6BACI,kBAAC,IAAD,CAAWE,MAAO,KAAMC,OAAQ,IAAKxC,KAAMoC,KAAKL,MAAMC,YAClDS,OAAS,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,EAAGC,QAAU,KAC7D,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,OAAO,OAAOC,SAAS,iBAC7C,kBAAC,IAAD,CAAQC,KAAO,OAAIH,QAAQ,cAAcC,OAAO,SAChD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeA,OAAO,SACtB,kBAAC,IAAD,CAAMG,KAAK,WAAW/C,KAAO,qEAAc2C,QAAQ,cAAcC,OAAO,UAAUI,UAAW,CAAEC,EAAG,S,+BAKxG,IAAD,OAEL,OACI,6BACI,8BACI,gLAC+B,6BAAS,6BACpC,4BAAQxB,MAAOO,KAAKL,MAAMrC,KAAM4D,SAAUlB,KAAKH,cAC3C,4BAAQJ,MAAM,aAAd,gEACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,SAAd,qCAIZ,6BAAS,6BACb,4BAAQ0B,QAAO,sBACX,sBAAA5D,EAAA,sEACM,EAAK6D,mBADX,4CADJ,wEAIwB,6BAAS,6BAAS,6BAAS,6BACnDpB,KAAKqB,iB,GAvDgBC,aA6D3BC,E,kDAEF,aAAc,IAAD,8BACT,gBACK5B,MAAQ,CAACrC,KAAM,YAChBsC,YAAa,CAAC,CAAC5B,KAAO,IAAKW,UAAY,IAAI,CAACX,KAAO,IAAKW,UAAY,MAExE,EAAKkB,aAAe,EAAKA,aAAaC,KAAlB,gBALX,E,yDASAC,GACTC,KAAKC,SAAS,CAAC3C,KAAMyC,EAAMG,OAAOT,U,+JAKlCO,K,SAAmCb,EAAea,KAAKL,MAAMrC,M,yBAA9CsC,Y,WAAVK,S,wJAGJ,OACG,6BACI,kBAAC,IAAD,CAAWE,MAAO,KAAMC,OAAQ,IAAKxC,KAAMoC,KAAKL,MAAMC,YAClDS,OAAS,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,EAAGC,QAAU,KAC7D,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,OAAO,OAAOC,SAAS,iBAC7C,kBAAC,IAAD,CAAQC,KAAO,gBAAMH,QAAQ,YAAYC,OAAO,SAChD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeA,OAAO,SACtB,kBAAC,IAAD,CAAMG,KAAK,WAAW/C,KAAO,kFAAiB2C,QAAQ,YAAYC,OAAO,UAAUI,UAAW,CAAEC,EAAG,S,+BAKzG,IAAD,OAEL,OACI,6BACI,8BACI,gLAC+B,6BAAS,6BACpC,4BAAQxB,MAAOO,KAAKL,MAAMrC,KAAM4D,SAAUlB,KAAKH,cAC3C,4BAAQJ,MAAM,aAAd,gEACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,SAAd,qCAIZ,6BAAS,6BACb,4BAAQ0B,QAAO,sBACX,sBAAA5D,EAAA,sEACM,EAAK6D,mBADX,4CADJ,qFAI2B,6BAAS,6BAAS,6BAAS,6BACtDpB,KAAKqB,iB,GAvDSC,aA6DpBE,E,kDAEF,aAAc,IAAD,8BACT,gBACK7B,MAAQ,CAACrC,KAAM,YAChBsC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALX,E,yDASAC,GACTC,KAAKC,SAAS,CAAC3C,KAAMyC,EAAMG,OAAOT,U,+JAKlCO,K,SAAmCZ,EAAWY,KAAKL,MAAMrC,M,yBAA1CsC,Y,WAAVK,S,wJAEGX,GACR,IAAMmC,EAAQzB,KAAKL,MAAMC,YACxB,OACG,4BAEI6B,EAAM3D,KAAI,SAACC,GACX,OAAO,4BACH,kBAAC,EAAD,CAAU0B,MAAK,2CAAa1B,EAAKC,KAAlB,iDAAiCD,EAAKgB,WACjD,yBAAK2C,IAAG,2CAAsC3D,EAAKkB,KAA3C,WAA2DkB,MAAM,KAAKC,OAAO,c,+BAS/F,IAAD,OAEL,OACI,6BACI,8BACI,gLAC+B,6BAAS,6BACpC,4BAAQX,MAAOO,KAAKL,MAAMrC,KAAM4D,SAAUlB,KAAKH,cAC3C,4BAAQJ,MAAM,aAAd,gEACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,UAAd,wCACA,4BAAQA,MAAM,SAAd,qCAIZ,6BAAS,6BACb,4BAAQ0B,QAAO,sBACX,sBAAA5D,EAAA,sEACM,EAAK6D,mBADX,4CADJ,0CAImB,6BAAS,6BAAS,6BAAS,6BAC9CpB,KAAK2B,mB,GAzDKL,aCrIFM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,oLAAqC,6BAAS,6BAC9C,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d8804ec.chunk.js","sourcesContent":["const fetchData = async (city) => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},rus&appid=dfa9203fc19394100719613828a57682&units=metric&lang=ru`);\n    return await response.json();\n};\n\nexport {\n    fetchData\n};","const averageValue = (min, max) => Math.round((min + max) / 2);\n\nconst parsToTemperature = (data) =>{\nconst result = data.list.map((item) =>  { \n  return {\n    name : item.dt_txt,\n    temperature : averageValue(item.main.temp_min, item.main.temp_max)}\n\n});\nreturn result;\n}\n\n\nconst parsToWind = (data) =>{\n  const result = data.list.map((item) =>  { \n    return {\n      name : item.dt_txt,\n      windSpeed : item.wind.speed}\n  \n  });\n  return result;\n}\n\n\nconst parsToWeather = (data) =>{\n  const result = data.list.map((item) =>  { \n    return {\n      name : item.dt_txt,\n      weather : item.weather[0].description,\n      icon : item.weather[0].icon}\n  \n  });\n  return result;\n}\n\n\nexport {parsToTemperature, parsToWind, parsToWeather};","import React, { Component } from \"react\";\nimport './App.css';\nimport {fetchData} from './utils/Api'\nimport {parsToTemperature, parsToWind, parsToWeather} from './utils/Tools'\nimport {\n  XAxis,\n  YAxis,\n  LineChart,\n  CartesianGrid,\n  Line,\n  Legend,\n  Tooltip\n} from \"recharts\";\n\n\nconst getWeatherTemperature = async (city) =>  await parsToTemperature(await fetchData(city));\nconst getWeatherWind = async (city) =>  await parsToWind(await fetchData(city));\nconst getWeather = async (city) =>  await parsToWeather(await fetchData(city));\nconst  ListItem = (props) => \n{\n    return <h style={{ color: 'red' }}>{props.value}</h>;\n}\n\nclass WeatherTemperature extends Component \n{\n    constructor(){\n        super();\n        this.state = {city: 'stavropol',\n            dataWeather: [{name : \"0\", temperature : 15},{name : \"1\", temperature : 15}]\n        };\n        this.handleChange = this.handleChange.bind(this);\n  \n    }\n\n    handleChange(event) {\n        this.setState({city: event.target.value});\n    }\n\n\n    async buttonGetWeather() {\n        this.setState({dataWeather : await getWeatherTemperature(this.state.city),  })\n    }\n    graphDraw(){\n         return(\n            <div>\n                <LineChart width={1100} height={300} data={this.state.dataWeather}  \n                    margin={ { top: 5, right: 30, left: 20, bottom: 5, percent : 10} }>\n                    <XAxis dataKey=\"name\" stroke=\"#000\" position=\"insideBottom\"/>\n                    <YAxis  unit = \"°\" dataKey=\"temperature\" stroke=\"#000\"/>\n                    <Tooltip />\n                    <Legend />\n                    <CartesianGrid stroke=\"#eee\"/>\n                    <Line type=\"monotone\" name = \"Температура\" dataKey=\"temperature\" stroke=\"#12b202\" activeDot={{ r: 8 }}/>\n                </LineChart>\n            </div> \n        )   \n    }\n    render() {\n        \n        return (\n            <div>\n                <form>\n                    <label>\n                        Выберите населенный пункт: <br></br><br></br>  \n                        <select value={this.state.city} onChange={this.handleChange}>\n                            <option value=\"stavropol\">Ставрополь</option>\n                            <option value=\"moscow\">Москва</option>\n                            <option value=\"london\">Лондон</option>\n                            <option value=\"paris\">Париж</option>\n                        </select>\n                    </label>\n                </form>\n                <br></br><br></br> \n            <button onClick = { \n                async () => {\n                await this.buttonGetWeather();\n                }\n            }> Температура </button><br></br><br></br><br></br><br></br>\n           {this.graphDraw()}\n        </div>\n        );\n    }\n}  \n\nclass WeatherWind extends Component \n{\n    constructor(){\n        super();\n        this.state = {city: 'stavropol',\n            dataWeather: [{name : \"0\", windSpeed : 15},{name : \"1\", windSpeed : 15}]\n        };\n        this.handleChange = this.handleChange.bind(this);\n  \n    }\n\n    handleChange(event) {\n        this.setState({city: event.target.value});\n    }\n\n\n    async buttonGetWeather() {\n        this.setState({dataWeather : await getWeatherWind(this.state.city),  })\n    }\n    graphDraw(){\n         return(\n            <div>\n                <LineChart width={1100} height={300} data={this.state.dataWeather}  \n                    margin={ { top: 5, right: 30, left: 20, bottom: 5, percent : 10} }>\n                    <XAxis dataKey=\"name\" stroke=\"#000\" position=\"insideBottom\"/>\n                    <YAxis  unit = \"м/с\" dataKey=\"windSpeed\" stroke=\"#000\"/>\n                    <Tooltip />\n                    <Legend />\n                    <CartesianGrid stroke=\"#eee\"/>\n                    <Line type=\"monotone\" name = \"Скорость ветра\" dataKey=\"windSpeed\" stroke=\"#12b202\" activeDot={{ r: 8 }}/>\n                </LineChart>\n            </div> \n        )   \n    }\n    render() {\n        \n        return (\n            <div>\n                <form>\n                    <label>\n                        Выберите населенный пункт: <br></br><br></br>  \n                        <select value={this.state.city} onChange={this.handleChange}>\n                            <option value=\"stavropol\">Ставрополь</option>\n                            <option value=\"moscow\">Москва</option>\n                            <option value=\"london\">Лондон</option>\n                            <option value=\"paris\">Париж</option>\n                        </select>\n                    </label>\n                </form>\n                <br></br><br></br> \n            <button onClick = { \n                async () => {\n                await this.buttonGetWeather();\n                }\n            }> Скорость ветра </button><br></br><br></br><br></br><br></br>\n           {this.graphDraw()}\n        </div>\n        );\n    }\n} \n\nclass Weather extends Component \n{\n    constructor(){\n        super();\n        this.state = {city: 'stavropol',\n            dataWeather: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n  \n    }\n\n    handleChange(event) {\n        this.setState({city: event.target.value});\n    }\n\n\n    async buttonGetWeather() {\n        this.setState({dataWeather : await getWeather(this.state.city),  })\n    }\n    weatherDraw(props){\n        const array = this.state.dataWeather;\n         return(\n            <ul>\n                {\n                array.map((item) => {\n                return <ul>\n                    <ListItem value={`время - ${item.name} погода ${item.weather}`}/> \n                        <img src={`http://openweathermap.org/img/wn/${item.icon}@2x.png`}  width=\"40\" height=\"40\"/>\n                    </ul>\n                }\n                )}\n            </ul>\n        )\n        \n    }\n    \n    render() {\n        \n        return (\n            <div>\n                <form>\n                    <label>\n                        Выберите населенный пункт: <br></br><br></br>  \n                        <select value={this.state.city} onChange={this.handleChange}>\n                            <option value=\"stavropol\">Ставрополь</option>\n                            <option value=\"moscow\">Москва</option>\n                            <option value=\"london\">Лондон</option>\n                            <option value=\"paris\">Париж</option>\n                        </select>\n                    </label>\n                </form>\n                <br></br><br></br> \n            <button onClick = { \n                async () => {\n                await this.buttonGetWeather();\n                }\n            }> Погода </button><br></br><br></br><br></br><br></br>\n           {this.weatherDraw()}\n        </div>\n        );\n    }\n} \n\nexport {WeatherTemperature, WeatherWind, Weather};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {WeatherTemperature,WeatherWind, Weather} from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>График погоды: Простая линия</h1><br></br><br></br>\n    <WeatherTemperature/>\n    <WeatherWind/>\n    <Weather/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}